package od

/*
固定滑动窗口

题目描述
一只贪吃的猴子，来到一个果园，发现许多香蕉排成一行，每行香蕉上有若干根香蕉。每串香蕉的根数由数组numbers给出。
猴子获取香蕉每次都只能从行的开头或者末尾获取，并且获取N次，求猴子最多能够获取多少香蕉

正难反易
正向思考问题是比较麻烦的
假设原数组的长度是m，需要从左右两端一共取出n个数字。
那么取完之后，数组剩余的元素长度为m-n.
且由于每次取出数字必须从左右两端进行，那么剩余数组在原数组中一定是连续的。
由于原数组的总和是固定的，为了使得左右两端取出的n个数字的总和尽可能的大，我们可以反向思考，把问题转变为使得剩余长度为m-n的数组的总和尽可能的小
那么显然，转换后的问题就是一个非常典型的固定滑窗问题了。
我们要战斗到长度为m-n的固定滑窗的和是最小值min_win_sun,原来数组的总和减去该值即为答案。


*/

func sumMonkeyGetFood() {

}

func sliceSum(s []int) int {
	sum := 0
	for _, i := range s {
		sum += i
	}
	return sum
}
